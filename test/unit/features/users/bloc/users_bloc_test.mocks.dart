// Mocks generated by Mockito 5.4.5 from annotations
// in library_management_system/test/unit/features/users/bloc/users_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:library_management_system/features/users/models/user_model.dart'
    as _i4;
import 'package:library_management_system/features/users/repositories/users_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UsersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersRepository extends _i1.Mock implements _i2.UsersRepository {
  MockUsersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.UserModel>> getAllUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUsers, []),
            returnValue: _i3.Stream<List<_i4.UserModel>>.empty(),
          )
          as _i3.Stream<List<_i4.UserModel>>);

  @override
  _i3.Stream<List<_i4.UserModel>> searchUsers(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchUsers, [query]),
            returnValue: _i3.Stream<List<_i4.UserModel>>.empty(),
          )
          as _i3.Stream<List<_i4.UserModel>>);

  @override
  _i3.Future<void> deleteUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> createUser({
    required String? name,
    required String? phoneNumber,
    required String? pesel,
    required String? email,
    required String? password,
    required String? role,
    String? adminEmail,
    String? adminPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [], {
              #name: name,
              #phoneNumber: phoneNumber,
              #pesel: pesel,
              #email: email,
              #password: password,
              #role: role,
              #adminEmail: adminEmail,
              #adminPassword: adminPassword,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> adminExists() =>
      (super.noSuchMethod(
            Invocation.method(#adminExists, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> createInitialAdmin({
    required String? name,
    required String? phoneNumber,
    required String? pesel,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createInitialAdmin, [], {
              #name: name,
              #phoneNumber: phoneNumber,
              #pesel: pesel,
              #email: email,
              #password: password,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateUser({
    required String? userId,
    required String? name,
    required String? phoneNumber,
    required String? pesel,
    required String? email,
    required String? role,
    String? adminEmail,
    String? adminPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [], {
              #userId: userId,
              #name: name,
              #phoneNumber: phoneNumber,
              #pesel: pesel,
              #email: email,
              #role: role,
              #adminEmail: adminEmail,
              #adminPassword: adminPassword,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
