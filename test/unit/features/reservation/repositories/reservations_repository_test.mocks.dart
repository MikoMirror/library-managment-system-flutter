// Mocks generated by Mockito 5.4.5 from annotations
// in library_management_system/test/unit/features/reservation/repositories/reservations_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:library_management_system/core/services/firestore/books_firestore_service.dart'
    as _i6;
import 'package:library_management_system/core/services/firestore/reservations_firestore_service.dart'
    as _i3;
import 'package:library_management_system/core/services/firestore/users_firestore_service.dart'
    as _i10;
import 'package:library_management_system/features/books/enums/sort_type.dart'
    as _i9;
import 'package:library_management_system/features/books/models/book.dart'
    as _i7;
import 'package:library_management_system/features/dashboard/models/borrowing_trend_point.dart'
    as _i8;
import 'package:library_management_system/features/reservation/models/reservation.dart'
    as _i5;
import 'package:library_management_system/features/users/models/user_model.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_1<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteBatch_2 extends _i1.SmartFake implements _i2.WriteBatch {
  _FakeWriteBatch_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_3<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_4<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_5<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_6 extends _i1.SmartFake
    implements _i2.SnapshotMetadata {
  _FakeSnapshotMetadata_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_7<T extends Object?> extends _i1.SmartFake
    implements _i2.Query<T> {
  _FakeQuery_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAggregateQuery_8 extends _i1.SmartFake
    implements _i2.AggregateQuery {
  _FakeAggregateQuery_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReservationsFirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReservationsFirestoreService extends _i1.Mock
    implements _i3.ReservationsFirestoreService {
  MockReservationsFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [path]),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [path]),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  _i2.WriteBatch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeWriteBatch_2(this, Invocation.method(#batch, [])),
          )
          as _i2.WriteBatch);

  @override
  _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>> getReservations() =>
      (super.noSuchMethod(
            Invocation.method(#getReservations, []),
            returnValue:
                _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_3<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getReservations, []),
                  ),
                ),
          )
          as _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getReservationStream(
    String? reservationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getReservationStream, [reservationId]),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> updateReservationStatus(
    String? reservationId,
    String? newStatus,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateReservationStatus, [
              reservationId,
              newStatus,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>> getExpiredReservations(
    _i2.Timestamp? cutoffTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getExpiredReservations, [cutoffTime]),
            returnValue:
                _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_3<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getExpiredReservations, [cutoffTime]),
                  ),
                ),
          )
          as _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> addReservation(_i5.Reservation? reservation) =>
      (super.noSuchMethod(
            Invocation.method(#addReservation, [reservation]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateReservation(String? id, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#updateReservation, [id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i5.Reservation>> getReservationsStream() =>
      (super.noSuchMethod(
            Invocation.method(#getReservationsStream, []),
            returnValue: _i4.Stream<List<_i5.Reservation>>.empty(),
          )
          as _i4.Stream<List<_i5.Reservation>>);

  @override
  _i4.Future<_i2.DocumentReference<Object?>> createReservation(
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createReservation, [data]),
            returnValue: _i4.Future<_i2.DocumentReference<Object?>>.value(
              _FakeDocumentReference_4<Object?>(
                this,
                Invocation.method(#createReservation, [data]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentReference<Object?>>);

  @override
  _i4.Future<void> deleteReservation(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteReservation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> validateReservationDate(DateTime? reservationDate) =>
      (super.noSuchMethod(
            Invocation.method(#validateReservationDate, [reservationDate]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> addDocument(
    String? collection,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [collection, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDocument(
    String? collection,
    String? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [collection, id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocument(String? collection, String? documentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [collection, documentId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getDocument(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [collection, documentId]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getDocument, [collection, documentId]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getNestedDocument(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocument, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getNestedDocument, [
                  collection,
                  documentId,
                  subcollection,
                  subdocumentId,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i2.DocumentReference<Object?> getNestedDocumentReference(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocumentReference, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _FakeDocumentReference_4<Object?>(
              this,
              Invocation.method(#getNestedDocumentReference, [
                collection,
                documentId,
                subcollection,
                subdocumentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Object?>);

  @override
  _i4.Stream<List<T>> getCollectionStream<T>({
    required String? collection,
    required T Function(Map<String, dynamic>, String)? fromMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionStream, [], {
              #collection: collection,
              #fromMap: fromMap,
            }),
            returnValue: _i4.Stream<List<T>>.empty(),
          )
          as _i4.Stream<List<T>>);

  @override
  _i2.DocumentReference<Object?> getDocumentReference(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentReference, [collection, documentId]),
            returnValue: _FakeDocumentReference_4<Object?>(
              this,
              Invocation.method(#getDocumentReference, [
                collection,
                documentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Object?>);
}

/// A class which mocks [BooksFirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBooksFirestoreService extends _i1.Mock
    implements _i6.BooksFirestoreService {
  MockBooksFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i2.CollectionReference<Map<String, dynamic>> getCollection(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#getCollection, [path]),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.method(#getCollection, [path]),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getDocumentStream(
    String? bookId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentStream, [bookId]),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> addBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#addBook, [book]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i7.Book>> getAllBooks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllBooks, []),
            returnValue: _i4.Stream<List<_i7.Book>>.empty(),
          )
          as _i4.Stream<List<_i7.Book>>);

  @override
  _i4.Future<void> updateBookQuantity(String? bookId, int? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#updateBookQuantity, [bookId, quantity]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> rateBook(String? bookId, String? userId, double? rating) =>
      (super.noSuchMethod(
            Invocation.method(#rateBook, [bookId, userId, rating]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<bool> getFavoriteStatus(String? userId, String? bookId) =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteStatus, [userId, bookId]),
            returnValue: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  _i4.Future<void> updateBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#updateBook, [book]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.DocumentReference<Map<String, dynamic>> getDocumentReference(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentReference, [collection, documentId]),
            returnValue: _FakeDocumentReference_4<Map<String, dynamic>>(
              this,
              Invocation.method(#getDocumentReference, [
                collection,
                documentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> getBookStats() =>
      (super.noSuchMethod(
            Invocation.method(#getBookStats, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<_i8.BorrowingTrendPoint>> getBorrowingTrends({
    required DateTime? startDate,
    required DateTime? endDate,
    required String? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBorrowingTrends, [], {
              #startDate: startDate,
              #endDate: endDate,
              #status: status,
            }),
            returnValue: _i4.Future<List<_i8.BorrowingTrendPoint>>.value(
              <_i8.BorrowingTrendPoint>[],
            ),
          )
          as _i4.Future<List<_i8.BorrowingTrendPoint>>);

  @override
  _i4.Future<List<_i5.Reservation>> getReservationsForReport(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getReservationsForReport, [startDate, endDate]),
            returnValue: _i4.Future<List<_i5.Reservation>>.value(
              <_i5.Reservation>[],
            ),
          )
          as _i4.Future<List<_i5.Reservation>>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> getBooksStream({
    _i9.SortType? sortType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBooksStream, [], {#sortType: sortType}),
            returnValue:
                _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> addDocument(
    String? collection,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [collection, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDocument(
    String? collection,
    String? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [collection, id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocument(String? collection, String? documentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [collection, documentId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getDocument(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [collection, documentId]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getDocument, [collection, documentId]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getNestedDocument(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocument, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getNestedDocument, [
                  collection,
                  documentId,
                  subcollection,
                  subdocumentId,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i2.DocumentReference<Object?> getNestedDocumentReference(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocumentReference, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _FakeDocumentReference_4<Object?>(
              this,
              Invocation.method(#getNestedDocumentReference, [
                collection,
                documentId,
                subcollection,
                subdocumentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Object?>);

  @override
  _i4.Stream<List<T>> getCollectionStream<T>({
    required String? collection,
    required T Function(Map<String, dynamic>, String)? fromMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionStream, [], {
              #collection: collection,
              #fromMap: fromMap,
            }),
            returnValue: _i4.Stream<List<T>>.empty(),
          )
          as _i4.Stream<List<T>>);
}

/// A class which mocks [UsersFirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersFirestoreService extends _i1.Mock
    implements _i10.UsersFirestoreService {
  MockUsersFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i4.Future<void> createUser(_i11.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getUserStream(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserStream, [userId]),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Stream<List<_i11.UserModel>> getUsersStream() =>
      (super.noSuchMethod(
            Invocation.method(#getUsersStream, []),
            returnValue: _i4.Stream<List<_i11.UserModel>>.empty(),
          )
          as _i4.Stream<List<_i11.UserModel>>);

  @override
  _i4.Future<List<_i11.UserModel>> searchUsers(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchUsers, [query]),
            returnValue: _i4.Future<List<_i11.UserModel>>.value(
              <_i11.UserModel>[],
            ),
          )
          as _i4.Future<List<_i11.UserModel>>);

  @override
  _i4.Future<bool> checkUserExists(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#checkUserExists, [email]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i11.UserModel?> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i4.Future<_i11.UserModel?>.value(),
          )
          as _i4.Future<_i11.UserModel?>);

  @override
  _i4.Future<void> updateUser(String? userId, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [userId, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.DocumentReference<Map<String, dynamic>> getDocumentReference(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentReference, [collection, documentId]),
            returnValue: _FakeDocumentReference_4<Map<String, dynamic>>(
              this,
              Invocation.method(#getDocumentReference, [
                collection,
                documentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i4.Future<void> addDocument(
    String? collection,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [collection, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDocument(
    String? collection,
    String? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [collection, id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocument(String? collection, String? documentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [collection, documentId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getDocument(
    String? collection,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [collection, documentId]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getDocument, [collection, documentId]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Object?>> getNestedDocument(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocument, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<Object?>>.value(
              _FakeDocumentSnapshot_5<Object?>(
                this,
                Invocation.method(#getNestedDocument, [
                  collection,
                  documentId,
                  subcollection,
                  subdocumentId,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Object?>>);

  @override
  _i2.DocumentReference<Object?> getNestedDocumentReference(
    String? collection,
    String? documentId,
    String? subcollection,
    String? subdocumentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNestedDocumentReference, [
              collection,
              documentId,
              subcollection,
              subdocumentId,
            ]),
            returnValue: _FakeDocumentReference_4<Object?>(
              this,
              Invocation.method(#getNestedDocumentReference, [
                collection,
                documentId,
                subcollection,
                subdocumentId,
              ]),
            ),
          )
          as _i2.DocumentReference<Object?>);

  @override
  _i4.Stream<List<T>> getCollectionStream<T>({
    required String? collection,
    required T Function(Map<String, dynamic>, String)? fromMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionStream, [], {
              #collection: collection,
              #fromMap: fromMap,
            }),
            returnValue: _i4.Stream<List<T>>.empty(),
          )
          as _i4.Stream<List<T>>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference extends _i1.Mock
    implements _i2.DocumentReference<Map<String, dynamic>> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.CollectionReference<Map<String, dynamic>> get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> update(Map<Object, Object?>? data) =>
      (super.noSuchMethod(
            Invocation.method(#update, [data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> get([
    _i2.GetOptions? options,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue:
                _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                  _FakeDocumentSnapshot_5<Map<String, dynamic>>(
                    this,
                    Invocation.method(#get, [options]),
                  ),
                ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> snapshots({
    bool? includeMetadataChanges = false,
    _i2.ListenSource? source = _i2.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> set(Map<String, dynamic>? data, [_i2.SetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [data, options]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.DocumentReference<R> withConverter<R>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeDocumentReference_4<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i2.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot extends _i1.Mock
    implements _i2.DocumentSnapshot<Map<String, dynamic>> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_4<Map<String, dynamic>>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_6(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot extends _i1.Mock
    implements _i2.QuerySnapshot<Map<String, dynamic>> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i2.QueryDocumentSnapshot<Map<String, dynamic>>>[],
          )
          as List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>>);

  @override
  List<_i2.DocumentChange<Map<String, dynamic>>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i2.DocumentChange<Map<String, dynamic>>>[],
          )
          as List<_i2.DocumentChange<Map<String, dynamic>>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_6(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference extends _i1.Mock
    implements _i2.CollectionReference<Map<String, dynamic>> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<_i2.DocumentReference<Map<String, dynamic>>> add(
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#add, [data]),
            returnValue:
                _i4.Future<_i2.DocumentReference<Map<String, dynamic>>>.value(
                  _FakeDocumentReference_4<Map<String, dynamic>>(
                    this,
                    Invocation.method(#add, [data]),
                  ),
                ),
          )
          as _i4.Future<_i2.DocumentReference<Map<String, dynamic>>>);

  @override
  _i2.DocumentReference<Map<String, dynamic>> doc([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [path]),
            returnValue: _FakeDocumentReference_4<Map<String, dynamic>>(
              this,
              Invocation.method(#doc, [path]),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.CollectionReference<R> withConverter<R extends Object?>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeCollectionReference_1<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i2.CollectionReference<R>);

  @override
  _i2.Query<Map<String, dynamic>> endAtDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endAtDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endAt, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBeforeDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endBeforeDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endBefore, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>> get([
    _i2.GetOptions? options,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue:
                _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_3<Map<String, dynamic>>(
                    this,
                    Invocation.method(#get, [options]),
                  ),
                ),
          )
          as _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> limit(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [limit]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#limit, [limit]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> snapshots({
    bool? includeMetadataChanges = false,
    _i2.ListenSource? source = _i2.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue:
                _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#orderBy, [field], {#descending: descending}),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#orderBy, [field], {#descending: descending}),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfterDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAfterDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAfterDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAfter, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAtDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAtDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAt, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #where,
              [field],
              {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
              },
            ),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(
                #where,
                [field],
                {
                  #isEqualTo: isEqualTo,
                  #isNotEqualTo: isNotEqualTo,
                  #isLessThan: isLessThan,
                  #isLessThanOrEqualTo: isLessThanOrEqualTo,
                  #isGreaterThan: isGreaterThan,
                  #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                  #arrayContains: arrayContains,
                  #arrayContainsAny: arrayContainsAny,
                  #whereIn: whereIn,
                  #whereNotIn: whereNotIn,
                  #isNull: isNull,
                },
              ),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.AggregateQuery count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _FakeAggregateQuery_8(
              this,
              Invocation.method(#count, []),
            ),
          )
          as _i2.AggregateQuery);

  @override
  _i2.AggregateQuery aggregate(
    _i2.AggregateField? aggregateField1, [
    _i2.AggregateField? aggregateField2,
    _i2.AggregateField? aggregateField3,
    _i2.AggregateField? aggregateField4,
    _i2.AggregateField? aggregateField5,
    _i2.AggregateField? aggregateField6,
    _i2.AggregateField? aggregateField7,
    _i2.AggregateField? aggregateField8,
    _i2.AggregateField? aggregateField9,
    _i2.AggregateField? aggregateField10,
    _i2.AggregateField? aggregateField11,
    _i2.AggregateField? aggregateField12,
    _i2.AggregateField? aggregateField13,
    _i2.AggregateField? aggregateField14,
    _i2.AggregateField? aggregateField15,
    _i2.AggregateField? aggregateField16,
    _i2.AggregateField? aggregateField17,
    _i2.AggregateField? aggregateField18,
    _i2.AggregateField? aggregateField19,
    _i2.AggregateField? aggregateField20,
    _i2.AggregateField? aggregateField21,
    _i2.AggregateField? aggregateField22,
    _i2.AggregateField? aggregateField23,
    _i2.AggregateField? aggregateField24,
    _i2.AggregateField? aggregateField25,
    _i2.AggregateField? aggregateField26,
    _i2.AggregateField? aggregateField27,
    _i2.AggregateField? aggregateField28,
    _i2.AggregateField? aggregateField29,
    _i2.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#aggregate, [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ]),
            returnValue: _FakeAggregateQuery_8(
              this,
              Invocation.method(#aggregate, [
                aggregateField1,
                aggregateField2,
                aggregateField3,
                aggregateField4,
                aggregateField5,
                aggregateField6,
                aggregateField7,
                aggregateField8,
                aggregateField9,
                aggregateField10,
                aggregateField11,
                aggregateField12,
                aggregateField13,
                aggregateField14,
                aggregateField15,
                aggregateField16,
                aggregateField17,
                aggregateField18,
                aggregateField19,
                aggregateField20,
                aggregateField21,
                aggregateField22,
                aggregateField23,
                aggregateField24,
                aggregateField25,
                aggregateField26,
                aggregateField27,
                aggregateField28,
                aggregateField29,
                aggregateField30,
              ]),
            ),
          )
          as _i2.AggregateQuery);
}

/// A class which mocks [WriteBatch].
///
/// See the documentation for Mockito's code generation for more information.
class MockWriteBatch extends _i1.Mock implements _i2.WriteBatch {
  MockWriteBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void delete(_i2.DocumentReference<Object?>? document) => super.noSuchMethod(
    Invocation.method(#delete, [document]),
    returnValueForMissingStub: null,
  );

  @override
  void set<T>(
    _i2.DocumentReference<T>? document,
    T? data, [
    _i2.SetOptions? options,
  ]) => super.noSuchMethod(
    Invocation.method(#set, [document, data, options]),
    returnValueForMissingStub: null,
  );

  @override
  void update(
    _i2.DocumentReference<Object?>? document,
    Map<String, dynamic>? data,
  ) => super.noSuchMethod(
    Invocation.method(#update, [document, data]),
    returnValueForMissingStub: null,
  );
}
