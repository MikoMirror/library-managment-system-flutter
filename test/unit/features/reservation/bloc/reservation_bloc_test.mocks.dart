// Mocks generated by Mockito 5.4.5 from annotations
// in library_management_system/test/unit/features/reservation/bloc/reservation_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:library_management_system/features/reservation/models/reservation.dart'
    as _i4;
import 'package:library_management_system/features/reservation/repositories/reservation_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ReservationsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReservationsRepository extends _i1.Mock
    implements _i2.ReservationsRepository {
  MockReservationsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void startPeriodicCheck() => super.noSuchMethod(
    Invocation.method(#startPeriodicCheck, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> checkExpiredReservations() =>
      (super.noSuchMethod(
            Invocation.method(#checkExpiredReservations, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Reservation>> getReservations() =>
      (super.noSuchMethod(
            Invocation.method(#getReservations, []),
            returnValue: _i3.Future<List<_i4.Reservation>>.value(
              <_i4.Reservation>[],
            ),
          )
          as _i3.Future<List<_i4.Reservation>>);

  @override
  _i3.Future<void> createReservation({
    required String? userId,
    required String? bookId,
    required String? status,
    required _i5.Timestamp? borrowedDate,
    required _i5.Timestamp? dueDate,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createReservation, [], {
              #userId: userId,
              #bookId: bookId,
              #status: status,
              #borrowedDate: borrowedDate,
              #dueDate: dueDate,
              #quantity: quantity,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateReservationStatus({
    required String? reservationId,
    required String? newStatus,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateReservationStatus, [], {
              #reservationId: reservationId,
              #newStatus: newStatus,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteReservation(String? reservationId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteReservation, [reservationId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> checkAndUpdateOverdueReservations() =>
      (super.noSuchMethod(
            Invocation.method(#checkAndUpdateOverdueReservations, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Reservation>> getReservationsToExpire(DateTime? now) =>
      (super.noSuchMethod(
            Invocation.method(#getReservationsToExpire, [now]),
            returnValue: _i3.Future<List<_i4.Reservation>>.value(
              <_i4.Reservation>[],
            ),
          )
          as _i3.Future<List<_i4.Reservation>>);

  @override
  _i3.Future<List<_i4.Reservation>> getBorrowedBooksToCheck(DateTime? now) =>
      (super.noSuchMethod(
            Invocation.method(#getBorrowedBooksToCheck, [now]),
            returnValue: _i3.Future<List<_i4.Reservation>>.value(
              <_i4.Reservation>[],
            ),
          )
          as _i3.Future<List<_i4.Reservation>>);

  @override
  _i3.Future<void> resetAllReservationStatuses() =>
      (super.noSuchMethod(
            Invocation.method(#resetAllReservationStatuses, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> validateReservationDate(DateTime? reservationDate) =>
      (super.noSuchMethod(
            Invocation.method(#validateReservationDate, [reservationDate]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> updateBookQuantity(String? bookId, int? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#updateBookQuantity, [bookId, quantity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
